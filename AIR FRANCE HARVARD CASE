############################### Team 1 ##########################

library(readxl)

AFCSS <- read_excel("/Users/Mudabbir/Desktop/Air France Case Spreadsheet Supplement.xls", 
                    sheet = "DoubleClick")


install.packages("dplyr")
install.packages("tidyverse")

library(dplyr)
library(tidyverse)

#AFCSS <- select(AFCSS, -`Publisher ID`)
#AFCSS <- select(AFCSS, -`Keyword ID`)
#AFCSS <- select(AFCSS, -`Bid Strategy`)
#AFCSS <- select(AFCSS, -`Keyword Type`)


AFCSS$factor_publisher_name <- as.factor(AFCSS$`Publisher Name`)
AFCSS$factor_match_type <- as.factor(AFCSS$`Match Type`)
AFCSS$factor_status <- as.factor(AFCSS$Status)
AFCSS$`Publisher Name`<-as.factor(AFCSS$`Publisher Name`)

######### Word Graph ###########

# Install
install.packages("tm")  # for text mining
install.packages("SnowballC") # for text stemming
install.packages("wordcloud") # word-cloud generator 
install.packages("RColorBrewer") # color palettes
# Load

library(tm)
library(SnowballC)
library(wordcloud)
library(RColorBrewer)


text <- AFCSS$Keyword
doc <- Corpus(VectorSource(text))
inspect(doc)

# Eliminate extra white spaces
docs <- tm_map(doc, stripWhitespace)

# Remove punctuations
docs <- tm_map(docs, removePunctuation)

#Most errors and warning messages start here
toSpace <- content_transformer(function (x , pattern ) gsub(pattern, " ", x))
docs <- tm_map(docs, toSpace, ",")
docs <- tm_map(docs, toSpace, ".")
docs <- tm_map(docs, toSpace, "2006::")


dtm <- TermDocumentMatrix(doc)
m <- as.matrix(dtm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
head(d, 10)


########### Text Cleaning / Formatting ############
install.packages("stringr")
library(stringr)

text_col_cleaner <- function(df,col_num) {
  new_col_vector <- c()
  for (i in 1:nrow(df)) {
    if (is.character(df[,col_num]) == TRUE) {
      clean_text <- str_replace_all(df[i,col_num], "[^[:alnum:]]", " ")
      clean_text <- tolower(clean_text)
      new_col_vector <- c(new_col_vector,clean_text)
    } else {
      next
    }#close if-else
  }#close for loop
  result_df <- as.data.frame(cbind(df, new_col_vector))
  return(result_df)
}#close function

####################################################

d<-text_col_cleaner(d,1)


word_graph <- set.seed(1234)

wordcloud(words = d$new_col_vector, freq = d$freq, min.freq = 4,
          random.order=FALSE,  
          colors=brewer.pal(8, "Dark2"))


findFreqTerms(dtm, lowfreq = 5)

#correlation between words
findAssocs(dtm, terms = "cheap", corlimit = 0.05)
findAssocs(dtm, terms = "paris", corlimit = 0.05)
findAssocs(dtm, terms = "ticket", corlimit = 0.05)



barplot(d[1:20,]$freq, las = 2, names.arg = d[1:20,]$word,
        col ="lightblue", main ="Most frequent words",
        ylab = "Word frequencies")


#filtering first words 
first_words <- d[1:20,]

######## Analysis ##############

#Opimize ROA
#Return on advertisement spend 
#Revenue/Cost adquision 

# Publisher- Benedicta 
# Campaign- Sham
# Keywords- Mud
# Bidding/AD position- Uresha 
# Match Type- Pieter


ROA 
sum(AFCSS$Amount)/sum(AFCSS$`Total Cost`)

6.172136
############## PUBLISHER ANALYSIS ########################
#publisher most trafic , revenue and cost 

publisher_l <- data.frame(AFCSS$`Publisher Name`,AFCSS$Clicks,AFCSS$`Avg. Cost per Click`,AFCSS$Impressions,AFCSS$Amount, AFCSS$`Total Cost`,AFCSS$`Total Volume of Bookings`)

colnames(publisher_l)

library(tidyverse)
publisher_l <- as_tibble(publisher_l)

names(publisher_l)[names(publisher_l) == "AFCSS..Publisher.Name."] <- "Publisher_name"
names(publisher_l)[names(publisher_l) == "AFCSS.Clicks"] <- "Clicks"
names(publisher_l)[names(publisher_l) == "AFCSS..Avg..Cost.per.Click."] <- "Avg_cost_per_click"
names(publisher_l)[names(publisher_l) == "AFCSS.Impressions"] <- "Impressions"
names(publisher_l)[names(publisher_l) == "AFCSS..Total.Cost."] <- "Total_cost"
names(publisher_l)[names(publisher_l) == "AFCSS.Amount"] <- "Amount"
names(publisher_l)[names(publisher_l) == "AFCSS..Total.Volume.of.Bookings."] <- "Total_vol_bookings"


publisher_l$Publisher_name <- as.factor(publisher_l$Publisher_name)


### SUBSET BY FACTORS - ANALYZING INDIVIDUAL 

Google_Global   <- subset (publisher_l, Publisher_name == "Google - Global")
Google_US       <- subset (publisher_l, Publisher_name == "Google - US")
MSN_Global      <- subset (publisher_l, Publisher_name == "MSN - Global")
MSN_US          <- subset (publisher_l, Publisher_name == "MSN - US")
Overture_Global <- subset (publisher_l, Publisher_name == "Overture - Global")
Overture_US     <- subset (publisher_l, Publisher_name == "Overture - US")
yahoo_US        <- subset (publisher_l, Publisher_name == "Yahoo - US")



list_factor <- list(Google_Global,Google_US,MSN_Global,MSN_US,Overture_US,Overture_Global,yahoo_US)


###### ROA 

ROA_FUNCTION <-  function(df){
  
  ROA <- sum(df["Amount"])/sum(df["Total_cost"])
  
  return(ROA)
  
} # closing ROA_FUNCTION function

sum(Google_US$Amount)/sum(Google_US$Total_cost)

ROA_FUNCTION(Google_US)
ROA_FUNCTION(Google_Global)
ROA_FUNCTION(MSN_Global)
ROA_FUNCTION(MSN_US)
ROA_FUNCTION(Overture_Global)
ROA_FUNCTION(Overture_US)
ROA_FUNCTION(yahoo_US)

ROA_OVERALL <- (ROA_FUNCTION(Google_US) + ROA_FUNCTION(Google_Global) + ROA_FUNCTION(MSN_Global)+
  ROA_FUNCTION(MSN_US) + ROA_FUNCTION(Overture_Global) + ROA_FUNCTION(Overture_US) + ROA_FUNCTION(yahoo_US)
  
mean (ROA_OVERALL)

plot (ROA_OVERALL)

plot ()

list_factor[1]

roa <- c()

Roa_df <- as.data.frame(matrix(ncol=3, nrow = 7))


for (i in list_factor){
  x <- ROA_FUNCTION(i)
  roa <- c(roa,x)
}


length(roa)


rownames(Roa_df) <- c("Google_Global","Google_US","MSN_Global","MSN_US","Overture_US","Overture_Global","yahoo_US")
name <- c("Google_Global","Google_US","MSN_Global","MSN_US","Overture_US","Overture_Global","yahoo_US")
publisher <- c("Google_Global","Google_US","MSN_Global","MSN_US","Overture_US","Overture_Global","yahoo_US")



amount <- c()


sum_func <-  function(df){
  
  X <- sum(df["Amount"])
  return(X)
}

for (i in list_factor){
  y <- sum_func(i)
  amount <- c(amount, y)
}


click_cost <- c()

colnames(MSN_Global)

cost_per_click <-  function(df){
  
  X <- sum(df["Avg_cost_per_click"])
  y<- x / length(df)
  return(y)
}


for (i in list_factor){
  z <- cost_per_click(i)
  click_cost <- c(click_cost, z)
}


Total_cost <- c()


sum_cost <-  function(df){
  
  X <- sum(df["Total_cost"])
  return(X)
}

for (i in list_factor){
  y <- sum_cost(i)
  Total_cost <- c(Total_cost, y)
}




Roa_df$roa_1 <- roa
Roa_df$names <- name
Roa_df$amount <- amount
Roa_df$cost_click <- click_cost
Roa_df$Total_cost <- Total_cost

Roa_df <- select(Roa_df, -V2)
Roa_df <- select(Roa_df, - V1)
Roa_df <- select(Roa_df, - V3)

#### plot roa by publisher ########
library(ggplot2)



roa_chart <-plot_ly(data=Roa_df, y=~publisher, x=~roa_1, color=~publisher)

roa_chart <- roa_chart %>% layout(title = "Roa By publisher")
roa_chart

library(plotly)

ggplotly(roa_chart)

### amount by publisher in thousands 

amount_chart <- plot_ly(data=Roa_df, y=~publisher, x=~amount/1000, color=~publisher)
amount_chart <- amount_chart %>% layout(title = "Revenue by publisher")
amount_chart



Total_cost <- plot_ly(data=Roa_df, y=~publisher, x=~Total_cost/1000, color=~publisher)

Total_cost <- Total_cost %>% layout(title = "Total cost by publisher")
Total_cost



#####################################
library(rockchalk)

Air_France <- AFCSS

Air_France$`Publisher Name`   <- combineLevels(Air_France$`Publisher Name`,levs = c("Google - US","MSN - US","Overture - US","Yahoo - US"), newLabel = c("US") )
Air_France$`Publisher Name`   <- combineLevels(Air_France$`Publisher Name`,levs = c("Google - Global","MSN - Global","Overture - Global"), newLabel = c("Global") )

Global   <- subset (Air_France, `Publisher Name` == "Global")
US       <- subset (Air_France, `Publisher Name` == "US")


summary(Global)
summary(US)

ROA_FUNCTION(Global)
ROA_FUNCTION(US)

#Geo target 
plot_ly(data=Air_France, x=~Clicks, y=~Amount, color=~`Publisher Name`)

#plot by publisher 
plot_ly(data=AF, x=~Clicks, y=~Amount, color=~`Publisher Name`)


library(ggplot2)
library(plotly)
#install.packages("gapminder")
library(gapminder)

# Most basic bubble plot - by publisher 
g <- ggplot(AFCSS, aes(x=Clicks, y=Amount/1000, size = `Total Cost`,color= `Publisher Name`)) +
  geom_point(alpha=0.7) + ggtitle("Revenue vs Click by publisher") +
  theme(plot.title = element_text(color="Black", size=10, face="bold.italic"))


ggplotly(g)

# by geo target
geo <- ggplot(Air_France, aes(x=Clicks, y=Amount/1000, size = `Total Cost`,color= `Publisher Name`)) +
  geom_point(alpha=0.7) + ggtitle("US vs Global Revenue vs Click") +
  theme(plot.title = element_text(color="Black", size=10, face="bold.italic"))

ggplotly(geo)




############ Keyword
for (i in 1:nrow(AFCSS)){
  if(AFCSS$Keyword_Group[i] == "Air France"|AFCSS$Keyword_Group[i] == "Air France Brand"|AFCSS$Keyword_Group[i] == "Air France Website"|AFCSS$Keyword_Group[i] == "Business Class - Generic"|AFCSS$Keyword_Group[i] == "Google|Flights Relaunch"){AFCSS$Keyword_Group_new[i] <- "Air France"}
  else if(AFCSS$Keyword_Group[i] == "Athens"|AFCSS$Keyword_Group[i] == "France"|AFCSS$Keyword_Group[i] == "Lyon"|AFCSS$Keyword_Group[i] == "Marseille"|AFCSS$Keyword_Group[i] == "Nice"|AFCSS$Keyword_Group[i] == "Nice Branded"|AFCSS$Keyword_Group[i] == "Paris"|AFCSS$Keyword_Group[i] == "Paris Branded"|AFCSS$Keyword_Group[i] == "Tour de France"|AFCSS$Keyword_Group[i] == "Barcelona"|AFCSS$Keyword_Group[i] == "Europe"|AFCSS$Keyword_Group[i] == "Florence"|AFCSS$Keyword_Group[i] == "Google|Athens"|AFCSS$Keyword_Group[i] == "Google|Barcelona"|AFCSS$Keyword_Group[i] == "Google|Europe"|AFCSS$Keyword_Group[i] == "Google|Italy"|AFCSS$Keyword_Group[i] == "Google|rabat"|AFCSS$Keyword_Group[i] == "Google|Rome"|AFCSS$Keyword_Group[i] == "Google|Spain"|AFCSS$Keyword_Group[i] == "Italy"|AFCSS$Keyword_Group[i] == "Madrid"|AFCSS$Keyword_Group[i] == "Spain"){AFCSS$Keyword_Group_new[i] <- "Europe"}
  else if(AFCSS$Keyword_Group[i] == "Unassigned"){AFCSS$Keyword_Group_new[i] <- "Unassigned"}
  else{
    AFCSS$Keyword_Group_new[i] <- "US"
  }
}

#Air France  Group: 1
#Europe      Group: 2
#US          Group: 3
#Unassigned  Group: 4
AFCSS$Keyword_Group_new_factor <- c()

for(i in 1:nrow(Air_France)){
  if(AFCSS$Keyword_Group_new[i] == "Air France"){
    AFCSS$Keyword_Group_new_factor[i] <- 1
  }else if(AFCSS$Keyword_Group_new[i] == "Europe"){
    AFCSS$Keyword_Group_new_factor[i] <- 2
  }else if(AFCSS$Keyword_Group_new[i] == "US"){
    AFCSS$Keyword_Group_new_factor[i] <- 3
  }else
    AFCSS$Keyword_Group_new_factor[i] <- 4
  
}
